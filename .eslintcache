[{"/Users/popolin/workspace/rocketseat/react-resume/src/pages/Index/index.tsx":"1","/Users/popolin/workspace/rocketseat/react-resume/src/pages/About/index.tsx":"2","/Users/popolin/workspace/rocketseat/react-resume/src/pages/Stats/index.tsx":"3","/Users/popolin/workspace/rocketseat/react-resume/src/pages/Contact/index.tsx":"4","/Users/popolin/workspace/rocketseat/react-resume/src/pages/Json/index.tsx":"5","/Users/popolin/workspace/rocketseat/react-resume/src/pages/Simple/index.tsx":"6","/Users/popolin/workspace/rocketseat/react-resume/src/pages/Resume/index.tsx":"7","/Users/popolin/workspace/rocketseat/react-resume/src/components/Body/index.tsx":"8","/Users/popolin/workspace/rocketseat/react-resume/src/pages/Stats/Personal/index.tsx":"9","/Users/popolin/workspace/rocketseat/react-resume/src/pages/Stats/Site/index.tsx":"10","/Users/popolin/workspace/rocketseat/react-resume/src/components/Main/Stats/Table.tsx":"11","/Users/popolin/workspace/rocketseat/react-resume/src/components/Main/Stats/TableRow.tsx":"12"},{"size":1875,"mtime":1607479836502,"results":"13","hashOfConfig":"14"},{"size":1852,"mtime":1607482256380,"results":"15","hashOfConfig":"14"},{"size":939,"mtime":1607484930030,"results":"16","hashOfConfig":"14"},{"size":4224,"mtime":1607483578264,"results":"17","hashOfConfig":"14"},{"size":2926,"mtime":1607493086119,"results":"18","hashOfConfig":"14"},{"size":1204,"mtime":1607491952078,"results":"19","hashOfConfig":"14"},{"size":1898,"mtime":1607492070572,"results":"20","hashOfConfig":"14"},{"size":1879,"mtime":1607490224679,"results":"21","hashOfConfig":"14"},{"size":1606,"mtime":1607487654703,"results":"22","hashOfConfig":"14"},{"size":824,"mtime":1607487666045,"results":"23","hashOfConfig":"14"},{"size":398,"mtime":1607487531510,"results":"24","hashOfConfig":"14"},{"size":460,"mtime":1607486690136,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"l7jzra",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/popolin/workspace/rocketseat/react-resume/src/pages/Index/index.tsx",[],["54","55","56","57","58","59"],"/Users/popolin/workspace/rocketseat/react-resume/src/pages/About/index.tsx",["60"],"import React, { useCallback, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport path from 'path';\nimport { useTranslation } from 'react-i18next';\nimport { Helmet } from 'react-helmet';\nimport ReactMarkdown from 'react-markdown';\n\nimport Body, { IResume } from '../../components/Body';\n\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst ptMarkdown = require('../../static/about_pt.md');\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst enMarkdown = require('../../static/about_en.md');\n\ninterface AboutProps {\n  resume: IResume;\n  updateResume: React.FunctionComponent;\n}\n\nconst About: React.FC<AboutProps> = ({ resume, updateResume }) => {\n  const { t } = useTranslation('main');\n\n  const currentLanguage =\n    localStorage.getItem('@react-resume/language') || 'en';\n\n  let docMarkdown = enMarkdown;\n  if (currentLanguage === 'pt') {\n    docMarkdown = ptMarkdown;\n  }\n\n  const [markdown, setMarkdown] = React.useState('');\n\n  const loadMarkdown = useCallback(() => {\n    fetch(docMarkdown)\n      .then(res => res.text())\n      .then(md => {\n        setMarkdown(md);\n      });\n  }, [docMarkdown]);\n\n  useEffect(() => {\n    loadMarkdown();\n  }, [loadMarkdown]);\n\n  const count = markdown\n    .split(/\\s+/)\n    .map(s => s.replace(/\\W/g, ''))\n    .filter(s => s.length).length;\n\n  return (\n    <Body resume={resume} updateResume={updateResume}>\n      <Helmet title={t('about.title')} />\n      <article className=\"post\" id=\"about\">\n        <header>\n          <div className=\"title\">\n            <h2>\n              <Link to=\"/about\">{t('about.title')}</Link>\n            </h2>\n            <p>({t('about.subtitle', { count })})</p>\n          </div>\n        </header>\n        <ReactMarkdown allowDangerousHtml>{markdown}</ReactMarkdown>\n      </article>\n    </Body>\n  );\n};\n\nexport default About;\n","/Users/popolin/workspace/rocketseat/react-resume/src/pages/Stats/index.tsx",[],"/Users/popolin/workspace/rocketseat/react-resume/src/pages/Contact/index.tsx",["61","62","63","64","65","66","67","68","69"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { useTranslation } from 'react-i18next';\n\nimport { getSocialIcon } from '../../util/iconUtil';\n\nimport Body, { IResume } from '../../components/Body';\n\nconst messagesEn = [\n  'mail',\n  'hi',\n  'hello',\n  'ola',\n  'you-can-email-me-anything! really',\n  'well, not-anything. but-most-things',\n  'mail',\n  'i-am-a-react-enthusiastic',\n  'also-entrepreneur',\n  'like-many-things-at-all =) ',\n  'you.can.also.email.me.with.specific.topics.like',\n  'just-saying-hi',\n  'please-work-for-us',\n  'help',\n  'admin',\n  'an-idea',\n  \"I'll-stop-distracting-you-now\",\n  'thanks',\n];\n\nconst messagesPt = [\n  'mail',\n  'ola',\n  'e aÃ­',\n  'hello',\n  'voce-pode-me-escrever-tudo! de-verdade!',\n  'enfim, nao tudo. mas quase...',\n  'mail',\n  'sou-um-entusiasta-react',\n  'tambem-sou-empreendedor',\n  'afinal-gosto-de-muitas-coisas =) ',\n  'voce.tambem.pode.me.escrever.coisas.simples',\n  'apenas-dizendo-oi',\n  'trabalhe-para-nos',\n  'ajuda',\n  'admin',\n  'uma-deia',\n  'Vou-parar-de-distrair-voce-agora',\n  'obrigado',\n];\n\nconst currentLanguage = localStorage.getItem('@react-resume/language') || 'en';\n\n// const useInterval = (callback, delay) => {\n//   const savedCallback = useRef();\n\n//   useEffect(() => {\n//     savedCallback.current = callback;\n//   }, [callback]);\n\n//   useEffect(() => {\n//     if (delay) {\n//       const id = setInterval(() => {\n//         savedCallback.current();\n//       }, delay);\n//       return () => clearInterval(id);\n//     }\n//     return () => {}; // pass linter\n//   }, [delay]);\n// };\n\ninterface ContactProps {\n  resume: IResume;\n  updateResume: React.FunctionComponent;\n}\n\nconst Contact: React.FC<ContactProps> = ({ resume, updateResume }) => {\n  const { t } = useTranslation('main');\n\n  const mailDomain = resume.header.email.split('@')[1];\n  const mailName = resume.header.email.split('@')[0];\n  const messages =\n    currentLanguage === 'pt'\n      ? messagesPt.map(message => (message === 'mail' ? mailName : message))\n      : messagesEn.map(message => (message === 'mail' ? mailName : message));\n\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(messages[idx].length); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  //   useInterval(\n  //     () => {\n  //       let newIdx = idx;\n  //       let newChar = char;\n  //       if (char - hold >= messages[idx].length) {\n  //         newIdx += 1;\n  //         newChar = 0;\n  //       }\n  //       if (newIdx === messages.length) {\n  //         setIsActive(false);\n  //       } else {\n  //         updateMessage(messages[newIdx].slice(0, newChar));\n  //         updateIter(newIdx);\n  //         updateChar(newChar + 1);\n  //       }\n  //     },\n  //     isActive ? delay : null,\n  //   );\n\n  return (\n    <Body resume={resume} updateResume={updateResume}>\n      <Helmet title={t('resume.contact.title')} />\n      <article className=\"post\" id=\"contact\">\n        <header>\n          <div className=\"title\">\n            <h2>\n              <Link to=\"/contact\">{t('resume.contact.title')}</Link>\n            </h2>\n          </div>\n        </header>\n        <div className=\"email-at\">\n          <p>{t('resume.contact.description')}</p>\n          <div\n            className=\"inline-container\"\n            onMouseEnter={() => setIsActive(false)}\n            onMouseLeave={() => idx < messages.length && setIsActive(true)}\n          >\n            <a href={`mailto:${resume.header.email}`}>\n              <span>{message}</span>\n              <span>{`@${mailDomain}`}</span>\n            </a>\n          </div>\n        </div>\n        <ul className=\"icons\">\n          {resume.contacts.map(s => (\n            <li key={s.label}>\n              <a href={s.link}>{getSocialIcon(s.label)}</a>\n            </li>\n          ))}\n        </ul>\n      </article>\n    </Body>\n  );\n};\n\nexport default Contact;\n","/Users/popolin/workspace/rocketseat/react-resume/src/pages/Json/index.tsx",["70"],"/* eslint-disable import/no-extraneous-dependencies */\nimport React from 'react';\nimport AceEditor from 'react-ace';\nimport { Button } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport 'brace/mode/hjson';\nimport 'brace/theme/gruvbox';\nimport { Link } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { Helmet } from 'react-helmet';\nimport { FaSave, FaArrowRight } from 'react-icons/fa';\nimport Body, { IResume } from '../../components/Body';\n\ntoast.configure({\n  position: 'top-right',\n  autoClose: 3000,\n  hideProgressBar: false,\n  newestOnTop: false,\n  closeOnClick: true,\n  closeButton: false,\n  rtl: false,\n  draggable: true,\n  pauseOnHover: true,\n  progressStyle: {\n    background: 'lightgray',\n  },\n  bodyClassName: 'resume-toast-body',\n});\n\ninterface JsonProps {\n  resume: IResume;\n  updateResume: React.FunctionComponent;\n}\n\nconst Json: React.FC<JsonProps> = ({ resume, updateResume }) => {\n  const { t } = useTranslation('edit');\n  const [editorValue, setEditorValue] = React.useState(\n    JSON.stringify(resume, null, '\\t'),\n  );\n\n  return (\n    <Body resume={resume} updateResume={updateResume} full>\n      <Helmet title={t('json.title')} />\n\n      <article className=\"post\" id=\"about\">\n        <header>\n          <div className=\"title\">\n            <h2>\n              <Link to=\"/json\">{t('json.title')}</Link>\n            </h2>\n            <div style={{ display: 'inline' }} className=\"json-resume-tool\">\n              <p style={{ float: 'left' }}>{t('json.description')}</p>\n              <Button\n                animated\n                fluid\n                onClick={() => {\n                  toast(`â Ops... ${t('json.notMe')}`);\n                }}\n                style={{\n                  float: 'right',\n                  width: 200,\n                  height: 50,\n                  backgroundColor: '#fff',\n                  borderColor: '#fff',\n                  fontSize: 12,\n                }}\n              >\n                <Button.Content visible style={{ color: '#646464' }}>\n                  <FaSave />\n                  {'  '}\n                  {t('json.saveChanges')}\n                </Button.Content>\n                <Button.Content\n                  hidden\n                  style={{ color: '#646464', backgroundColor: '' }}\n                >\n                  {t('json.save')}\n                  {'  '}\n                  <FaArrowRight />\n                </Button.Content>\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        <AceEditor\n          width=\"100%\"\n          theme=\"gruvbox\"\n          mode=\"hjson\"\n          name=\"json-resume-editor\"\n          value={editorValue}\n          showGutter\n          showPrintMargin={false}\n          scrollMargin={[10, 10]}\n          tabSize={3}\n        />\n      </article>\n    </Body>\n  );\n};\n\nexport default Json;\n","/Users/popolin/workspace/rocketseat/react-resume/src/pages/Simple/index.tsx",[],"/Users/popolin/workspace/rocketseat/react-resume/src/pages/Resume/index.tsx",[],"/Users/popolin/workspace/rocketseat/react-resume/src/components/Body/index.tsx",[],"/Users/popolin/workspace/rocketseat/react-resume/src/pages/Stats/Personal/index.tsx",[],"/Users/popolin/workspace/rocketseat/react-resume/src/pages/Stats/Site/index.tsx",[],"/Users/popolin/workspace/rocketseat/react-resume/src/components/Main/Stats/Table.tsx",[],"/Users/popolin/workspace/rocketseat/react-resume/src/components/Main/Stats/TableRow.tsx",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":3,"column":8,"nodeType":"85","messageId":"86","endLine":3,"endColumn":12},{"ruleId":"83","severity":1,"message":"87","line":1,"column":27,"nodeType":"85","messageId":"86","endLine":1,"endColumn":36},{"ruleId":"83","severity":1,"message":"88","line":1,"column":38,"nodeType":"85","messageId":"86","endLine":1,"endColumn":44},{"ruleId":"83","severity":1,"message":"89","line":87,"column":9,"nodeType":"85","messageId":"86","endLine":87,"endColumn":13},{"ruleId":"83","severity":1,"message":"90","line":88,"column":9,"nodeType":"85","messageId":"86","endLine":88,"endColumn":14},{"ruleId":"83","severity":1,"message":"91","line":90,"column":15,"nodeType":"85","messageId":"86","endLine":90,"endColumn":25},{"ruleId":"83","severity":1,"message":"92","line":91,"column":19,"nodeType":"85","messageId":"86","endLine":91,"endColumn":32},{"ruleId":"83","severity":1,"message":"93","line":92,"column":10,"nodeType":"85","messageId":"86","endLine":92,"endColumn":14},{"ruleId":"83","severity":1,"message":"94","line":92,"column":16,"nodeType":"85","messageId":"86","endLine":92,"endColumn":26},{"ruleId":"83","severity":1,"message":"95","line":93,"column":10,"nodeType":"85","messageId":"86","endLine":93,"endColumn":18},{"ruleId":"83","severity":1,"message":"96","line":38,"column":23,"nodeType":"85","messageId":"86","endLine":38,"endColumn":37},"jsx-a11y/label-has-for",[],"lines-around-directive",["97"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"@typescript-eslint/no-unused-vars","'path' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useRef' is defined but never used.","'hold' is assigned a value but never used.","'delay' is assigned a value but never used.","'updateIter' is assigned a value but never used.","'updateMessage' is assigned a value but never used.","'char' is assigned a value but never used.","'updateChar' is assigned a value but never used.","'isActive' is assigned a value but never used.","'setEditorValue' is assigned a value but never used.","padding-line-between-statements"]